import UserSchema from "../Model/user.model.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

// import bcrypt from "bcrypt";
// import userSchema from "../models/userModel.js"; // Assuming this is the path to your User schema/model

export async function register(req, res) {
  const {
    userId,
    username,
    email,
    password,
    confirmPassword,
    avatar,
    channels,
  } = req.body;

  try {
    // Check if the user already exists based on email or username
    const existingUser = await UserSchema.findOne({
      $or: [{ email }, { username }],
    });
    if (existingUser) {
      return res
        .status(400)
        .json({ message: "User with this email or username already exists" });
    }

    // Validate if password and confirmPassword match
    if (password !== confirmPassword) {
      return res.status(400).json({ message: "Passwords do not match" });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create a new user with all required fields
    const newUser = new UserSchema({
      userId: userId || undefined, // Optional userId, could be autogenerated or left as `undefined`
      username,
      email,
      password: hashedPassword,
      avatar: avatar || "", // Default to an empty string if avatar URL is not provided
      channels: channels || [], // Default to an empty array if no channels are provided
    });

    // Save the new user to the database
    const savedUser = await newUser.save();

    // Return a success response with the saved user's data
    return res.status(201).json({
      message: "User registered successfully",
      user: {
        // userId: savedUser.userId,
        username: savedUser.username,
        email: savedUser.email,
        avatar: savedUser.avatar,
        channels: savedUser.channels,
      },
    });
  } catch (err) {
    console.error(err);
    return res
      .status(500)
      .json({ message: "Server error. Please try again later." });
  }
}

export function login(req, res) {
  const { email, password } = req.body;

  UserSchema.findOne({ email })
    .then((data) => {
      if (!data) {
        return res.status(404).json({ message: "user is not registered" });
      }

      let isValidPassword = bcrypt.compareSync(password, data.password);

      if (!isValidPassword) {
        return res.status(403).send({ message: "Invalid Password" });
      }

      let token = jwt.sign({ id: data._id }, "IMBanty02@", {
        expiresIn: "50m",
      });

      res.send({
        user: {
          id: data._id,
          email: data.email,
          fullName: data.fullName,
        },
        accessToken: token,
      });
    })
    .catch((err) => {
      res.status(500).send({ message: err.message });
    });
}

export async function getUser(req, res) {
  const userId = req.user.id; // Assume user ID is set in the request by middleware (e.g., from a JWT)

  try {
    const user = await UserSchema.findById(userId).select("-password"); // Exclude password from the result
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.send(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
}
